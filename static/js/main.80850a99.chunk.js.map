{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplaier","recovered","deaths","sortData","data","sort","a","b","PrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillcolor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","points","redius","maintainAspectRatio","tooltips","mode","intersect","callbacks","lable","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","console","log","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80850a99.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card , CardContent, Typography } from \"@material-ui/core\"\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick} \r\n        className={`infoBox ${active && \"infoBox-selected\"} ${isRed && \"infoBox-red\"}`}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases-green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n            \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex:\"#CC1034\",\r\n        multiplaier: 800,\r\n    },\r\n    recovered: {\r\n        hex:\"#7dd71d\",\r\n        multiplaier: 1200,\r\n    },\r\n    deaths: {\r\n        hex:\"#fb4443\",\r\n        multiplaier: 2000,\r\n    },\r\n};\r\n\r\n\r\nexport const sortData =(data) => {\r\n    const sortedData =[...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const PrintStat =(stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\nexport const showDataOnMap = (data, casesType=\"cases\") => \r\n    data.map((country) => (\r\n        <Circle\r\n        center ={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillcolor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplaier\r\n        }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                <div className=\"info-flag\"\r\n                    style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                ></div>\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n\r\n            </Popup>\r\n\r\n        </Circle>\r\n    ));\r\n","import React from 'react';\r\nimport \"./Map.css\";\r\nimport {Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport {showDataOnMap} from \"./util\";\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"https://osm.org.copyright>OpenStreetMap</a> contributors'\r\n                />\r\n                { showDataOnMap(countries, casesType) }\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n         {countries.map (({ country, cases }) => (\r\n            <tr>\r\n                 <td>{country}</td>\r\n                 <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n            </tr>   \r\n         ))  }   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState,useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n    const options = {\r\n        legend: {\r\n            display: false,\r\n        },\r\n        elements: {\r\n            points: {\r\n                redius: 0,\r\n            },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n            callbacks:{\r\n                lable: function (tooltipItem, data){\r\n                    return numeral(tooltipItem.value).format(\"+0,0\");\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                type:\"time\",\r\n                    time: {\r\n                        format: \"MM/DD/YY\",\r\n                        tooltipFormat:\"ll\",\r\n                    },\r\n            },],\r\n            yAxes: [\r\n                {\r\n                    gridlines:{\r\n                        display:false,\r\n                    },\r\n                    ticks:{\r\n                        callback: function (value,index,values) {\r\n                            return numeral(value).format(\"0a\");\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    };\r\n\r\n\r\n    const buildChartData = (data, casesType ) => {\r\n        let chartData =[];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data.cases) {\r\n            if(lastDataPoint){\r\n                let newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date]; \r\n        }\r\n            return chartData;\r\n    };\r\n\r\nfunction LineGraph({casesType =\"cases\", ...props})\r\n        {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n       await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n       .then((response) => { return response.json();\r\n        })\r\n       .then((data) => {\r\n           let chartData = buildChartData(data, casesType);\r\n           setData(chartData);\r\n           });\r\n    };\r\n        fetchData();\r\n    }, [casesType]); \r\n\r\n        return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                options ={options}\r\n             data={{\r\n                datasets: [{\r\n                    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                    borderColor:\"#CC1034\",\r\n                    data:  data,\r\n                \r\n                },],\r\n            }}  \r\n            />\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport{\n    MenuItem,\n    FormControl,\n    Select,\n    Card,\n    CardContent,\n}from \"@material-ui/core\";\n\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { sortData, PrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n    const[countries,setCountries] = useState([]);\n    const[country,setCountry] = useState('WorldWide');\n    const[countryInfo,setCountryInfo] = useState({});\n    const[tableData,setTableData] = useState([]);\n    const[mapCenter,setMapCenter] = useState({ lat:34.80746, lng: -40.4796});\n    const [mapZoom, setMapZoom] = useState(3);\n    const[mapCountries,setMapCountries] = useState([]);\n    const[casesType,setCasesType] = useState(\"cases\");\n\n    useEffect(() =>{\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then ((response) => response.json())\n        .then((data) => {\n            setCountryInfo(data);\n        });\n    }, []);\n    useEffect(() => {\n        const getCountriesData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\")\n            .then((response) => response.json())\n            .then((data) => {\n                const countries = data.map((country) => (\n                    {\n                    name: country.country,\n                    value:country.countryInfo.iso2,\n                    }));\n                    const sortedData = sortData(data);\n                    setTableData(sortedData);\n                    setMapCountries(data);\n                    setCountries(countries);\n            });\n        };\n            getCountriesData();\n    }, []);\n\n\n    const onCountryChange = (event) => {\n        const countryCode = event.target.value;\n        \n\n        const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        \n         fetch(url)\n        .then ((response) => response.json())\n        .then((data) => {\n                setCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n        });\n        \n    };\n            console.log('Country info >>>>>',countryInfo)\n    return ( \n    < div className = \"app\" >\n        < div className = \"app_left\" >\n        < div className = \"app_header\" >        \n<h1> COVID-19 TRACKER </h1>\n<FormControl className=\"app_dropdown\">\n    <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n        <MenuItem value=\"WorldWide\">All Countries</MenuItem>\n        {\n            countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))\n        }</Select>\n</FormControl>\n</div>  \n<div className=\"app_stats\">\n<InfoBox \nisRed active={casesType === \"cases\"} \nonClick={(e) => setCasesType(\"cases\")} \ntitle=\"Coronavirus Cases\" \ncases={PrintStat(countryInfo.todayCases)} \ntotal={PrintStat(countryInfo.cases)} />\n<InfoBox \nactive={casesType === \"recovered\"} \nonClick={(e) => setCasesType(\"recovered\")} \ntitle=\"Recovered\" \ncases={PrintStat(countryInfo.todayRecovered)} \ntotal={PrintStat(countryInfo.recovered)}/>\n<InfoBox \nisRed active={casesType === \"deaths\"} \nonClick={(e) => setCasesType(\"deaths\")} \ntitle=\"Deaths\" \ncases={PrintStat(countryInfo.todayDeaths)} \ntotal={PrintStat(countryInfo.deaths)}/>\n        </div>           \n<Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\n        </div>\n        \n        < Card className = \"app_right\">\n            <CardContent>\n                {/*table */}\n                <h3>Live Cases By Country</h3>\n                <Table countries={tableData}></Table>\n                <h3 className=\"app_graphTitle\">WorldWide new {casesType}</h3>\n                <LineGraph className=\"app_graph\" casesType={casesType} />\n                \n            </CardContent>\n        </Card> \n    </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}